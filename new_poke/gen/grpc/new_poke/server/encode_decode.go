// Code generated by goa v3.7.6, DO NOT EDIT.
//
// new_poke gRPC server encoders and decoders
//
// Command:
// $ goa gen new_poke/design

package server

import (
	"context"
	new_pokepb "new_poke/gen/grpc/new_poke/pb"
	newpoke "new_poke/gen/new_poke"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodePokemonResponse encodes responses from the "new_poke" service
// "pokemon" endpoint.
func EncodePokemonResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("new_poke", "pokemon", "string", v)
	}
	resp := NewProtoPokemonResponse(result)
	return resp, nil
}

// DecodePokemonRequest decodes requests sent to "new_poke" service "pokemon"
// endpoint.
func DecodePokemonRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *new_pokepb.PokemonRequest
		ok      bool
	)
	{
		if message, ok = v.(*new_pokepb.PokemonRequest); !ok {
			return nil, goagrpc.ErrInvalidType("new_poke", "pokemon", "*new_pokepb.PokemonRequest", v)
		}
	}
	var payload *newpoke.PokemonPayload
	{
		payload = NewPokemonPayload(message)
	}
	return payload, nil
}
