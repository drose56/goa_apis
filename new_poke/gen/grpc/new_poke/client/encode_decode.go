// Code generated by goa v3.7.6, DO NOT EDIT.
//
// new_poke gRPC client encoders and decoders
//
// Command:
// $ goa gen new_poke/design

package client

import (
	"context"
	new_pokepb "new_poke/gen/grpc/new_poke/pb"
	newpoke "new_poke/gen/new_poke"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildPokemonFunc builds the remote method to invoke for "new_poke" service
// "pokemon" endpoint.
func BuildPokemonFunc(grpccli new_pokepb.NewPokeClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Pokemon(ctx, reqpb.(*new_pokepb.PokemonRequest), opts...)
		}
		return grpccli.Pokemon(ctx, &new_pokepb.PokemonRequest{}, opts...)
	}
}

// EncodePokemonRequest encodes requests sent to new_poke pokemon endpoint.
func EncodePokemonRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*newpoke.PokemonPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("new_poke", "pokemon", "*newpoke.PokemonPayload", v)
	}
	return NewProtoPokemonRequest(payload), nil
}

// DecodePokemonResponse decodes responses from the new_poke pokemon endpoint.
func DecodePokemonResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*new_pokepb.PokemonResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("new_poke", "pokemon", "*new_pokepb.PokemonResponse", v)
	}
	res := NewPokemonResult(message)
	return res, nil
}
