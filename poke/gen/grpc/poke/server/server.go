// Code generated by goa v3.7.6, DO NOT EDIT.
//
// poke gRPC server
//
// Command:
// $ goa gen poke/design

package server

import (
	"context"
	pokepb "poke/gen/grpc/poke/pb"
	poke "poke/gen/poke"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the pokepb.PokeServer interface.
type Server struct {
	PokemonH goagrpc.UnaryHandler
	pokepb.UnimplementedPokeServer
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the poke service endpoints.
func New(e *poke.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		PokemonH: NewPokemonHandler(e.Pokemon, uh),
	}
}

// NewPokemonHandler creates a gRPC handler which serves the "poke" service
// "pokemon" endpoint.
func NewPokemonHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodePokemonRequest, EncodePokemonResponse)
	}
	return h
}

// Pokemon implements the "Pokemon" method in pokepb.PokeServer interface.
func (s *Server) Pokemon(ctx context.Context, message *pokepb.PokemonRequest) (*pokepb.PokemonResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "pokemon")
	ctx = context.WithValue(ctx, goa.ServiceKey, "poke")
	resp, err := s.PokemonH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*pokepb.PokemonResponse), nil
}
