// Code generated by goa v3.7.6, DO NOT EDIT.
//
// poke gRPC client encoders and decoders
//
// Command:
// $ goa gen poke/design

package client

import (
	"context"
	pokepb "poke/gen/grpc/poke/pb"
	poke "poke/gen/poke"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildPokemonFunc builds the remote method to invoke for "poke" service
// "pokemon" endpoint.
func BuildPokemonFunc(grpccli pokepb.PokeClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Pokemon(ctx, reqpb.(*pokepb.PokemonRequest), opts...)
		}
		return grpccli.Pokemon(ctx, &pokepb.PokemonRequest{}, opts...)
	}
}

// EncodePokemonRequest encodes requests sent to poke pokemon endpoint.
func EncodePokemonRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*poke.PokemonPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("poke", "pokemon", "*poke.PokemonPayload", v)
	}
	return NewProtoPokemonRequest(payload), nil
}

// DecodePokemonResponse decodes responses from the poke pokemon endpoint.
func DecodePokemonResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*pokepb.PokemonResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("poke", "pokemon", "*pokepb.PokemonResponse", v)
	}
	res := NewPokemonResult(message)
	return res, nil
}
