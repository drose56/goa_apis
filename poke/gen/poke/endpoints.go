// Code generated by goa v3.7.6, DO NOT EDIT.
//
// poke endpoints
//
// Command:
// $ goa gen poke/design

package poke

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "poke" service endpoints.
type Endpoints struct {
	Pokemon goa.Endpoint
}

// NewEndpoints wraps the methods of the "poke" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Pokemon: NewPokemonEndpoint(s),
	}
}

// Use applies the given middleware to all the "poke" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Pokemon = m(e.Pokemon)
}

// NewPokemonEndpoint returns an endpoint function that calls the method
// "pokemon" of service "poke".
func NewPokemonEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PokemonPayload)
		return s.Pokemon(ctx, p)
	}
}
